{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { cloudStorageAPI } from '../services/api';\nexport const useGoogleAuth = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [accessToken, setAccessToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if user has stored tokens\n  useEffect(() => {\n    const storedToken = localStorage.getItem('google_access_token');\n    const tokenExpiry = localStorage.getItem('google_token_expiry');\n    console.log('üîç Checking stored tokens:', {\n      hasToken: !!storedToken,\n      hasExpiry: !!tokenExpiry,\n      expiry: tokenExpiry ? new Date(parseInt(tokenExpiry)) : null\n    });\n    if (storedToken && tokenExpiry) {\n      const now = new Date().getTime();\n      if (now < parseInt(tokenExpiry)) {\n        console.log('‚úÖ Using stored valid token');\n        setAccessToken(storedToken);\n        setIsAuthenticated(true);\n      } else {\n        console.log('‚è∞ Stored token expired, clearing...');\n        localStorage.removeItem('google_access_token');\n        localStorage.removeItem('google_token_expiry');\n      }\n    }\n  }, []);\n  const authenticate = async () => {\n    console.log('üöÄ Starting Google authentication...');\n    try {\n      setIsLoading(true);\n      setError(null);\n      console.log('üìû Calling API to get auth URL...');\n\n      // Get authorization URL\n      const response = await cloudStorageAPI.getAuthUrl();\n      console.log('üìù API Response:', response);\n      const authUrl = response.data.authUrl;\n      console.log('üîó Auth URL received:', authUrl);\n      if (!authUrl) {\n        throw new Error('No auth URL received from server');\n      }\n      if (!authUrl.includes('accounts.google.com')) {\n        throw new Error('Invalid auth URL format: ' + authUrl);\n      }\n\n      // Create a promise to handle the popup result\n      const authPromise = new Promise((resolve, reject) => {\n        console.log('üîÑ Opening popup window...');\n        const popup = window.open(authUrl, 'google-auth', 'width=500,height=600,scrollbars=yes,resizable=yes,left=' + Math.round(window.screen.width / 2 - 250) + ',top=' + Math.round(window.screen.height / 2 - 300));\n        if (!popup) {\n          console.error('‚ùå Popup blocked!');\n          reject(new Error('Popup blocked. Please allow popups for this site and try again.'));\n          return;\n        }\n        console.log('‚úÖ Popup opened successfully');\n\n        // Debug: Check popup URL periodically\n        const urlCheckInterval = setInterval(() => {\n          try {\n            if (popup.closed) {\n              clearInterval(urlCheckInterval);\n              return;\n            }\n            // This will throw an error due to CORS, but that's expected\n            const currentUrl = popup.location.href;\n            console.log('üîç Popup URL:', currentUrl);\n          } catch (e) {\n            // Expected cross-origin error, ignore\n          }\n        }, 2000);\n\n        // Listen for messages from the popup\n        const messageHandler = event => {\n          console.log('üì® Message received in parent window:', {\n            origin: event.origin,\n            expectedOrigin: window.location.origin,\n            data: event.data\n          });\n\n          // Verify origin for security\n          if (event.origin !== window.location.origin) {\n            console.warn('‚ö†Ô∏è Message from unexpected origin:', event.origin);\n            return;\n          }\n          clearInterval(urlCheckInterval);\n          if (event.data.type === 'GOOGLE_AUTH_SUCCESS') {\n            console.log('‚úÖ Success message received:', event.data);\n            window.removeEventListener('message', messageHandler);\n            resolve({\n              accessToken: event.data.accessToken,\n              expiry: event.data.expiry\n            });\n          } else if (event.data.type === 'GOOGLE_AUTH_ERROR') {\n            console.error('‚ùå Error message received:', event.data);\n            window.removeEventListener('message', messageHandler);\n            reject(new Error(event.data.error || 'Authentication failed'));\n          }\n        };\n        window.addEventListener('message', messageHandler);\n        console.log('üëÇ Message listener added');\n\n        // Check if popup was closed manually\n        const checkClosed = setInterval(() => {\n          if (popup.closed) {\n            console.log('‚ùå Popup was closed by user');\n            clearInterval(checkClosed);\n            clearInterval(urlCheckInterval);\n            window.removeEventListener('message', messageHandler);\n            reject(new Error('Authentication cancelled by user'));\n          }\n        }, 1000);\n\n        // Timeout after 5 minutes\n        setTimeout(() => {\n          console.log('‚è∞ Authentication timeout');\n          clearInterval(checkClosed);\n          clearInterval(urlCheckInterval);\n          window.removeEventListener('message', messageHandler);\n          if (!popup.closed) {\n            popup.close();\n          }\n          reject(new Error('Authentication timeout (5 minutes)'));\n        }, 300000);\n      });\n      console.log('‚è≥ Waiting for authentication result...');\n\n      // Wait for authentication result\n      const {\n        accessToken,\n        expiry\n      } = await authPromise;\n      console.log('‚úÖ Authentication successful!', {\n        tokenLength: accessToken === null || accessToken === void 0 ? void 0 : accessToken.length,\n        expiry: new Date(parseInt(expiry))\n      });\n\n      // Store tokens\n      localStorage.setItem('google_access_token', accessToken);\n      localStorage.setItem('google_token_expiry', expiry.toString());\n      setAccessToken(accessToken);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('‚ùå Authentication failed:', error);\n      setError(error.message || 'Authentication failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    console.log('üö™ Logging out...');\n    localStorage.removeItem('google_access_token');\n    localStorage.removeItem('google_token_expiry');\n    setAccessToken(null);\n    setIsAuthenticated(false);\n    setError(null);\n  };\n  return {\n    isAuthenticated,\n    accessToken,\n    isLoading,\n    error,\n    authenticate,\n    logout\n  };\n};\n_s(useGoogleAuth, \"RUW3uT7eji0XzlCGLIHvlEecDoA=\");","map":{"version":3,"names":["useState","useEffect","cloudStorageAPI","useGoogleAuth","_s","isAuthenticated","setIsAuthenticated","accessToken","setAccessToken","isLoading","setIsLoading","error","setError","storedToken","localStorage","getItem","tokenExpiry","console","log","hasToken","hasExpiry","expiry","Date","parseInt","now","getTime","removeItem","authenticate","response","getAuthUrl","authUrl","data","Error","includes","authPromise","Promise","resolve","reject","popup","window","open","Math","round","screen","width","height","urlCheckInterval","setInterval","closed","clearInterval","currentUrl","location","href","e","messageHandler","event","origin","expectedOrigin","warn","type","removeEventListener","addEventListener","checkClosed","setTimeout","close","tokenLength","length","setItem","toString","message","logout"],"sources":["D:/pdf demo/frontend/src/hooks/useGoogleAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { cloudStorageAPI } from '../services/api';\r\n\r\nexport const useGoogleAuth = () => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if user has stored tokens\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('google_access_token');\r\n    const tokenExpiry = localStorage.getItem('google_token_expiry');\r\n    \r\n    console.log('üîç Checking stored tokens:', { \r\n      hasToken: !!storedToken, \r\n      hasExpiry: !!tokenExpiry,\r\n      expiry: tokenExpiry ? new Date(parseInt(tokenExpiry)) : null\r\n    });\r\n    \r\n    if (storedToken && tokenExpiry) {\r\n      const now = new Date().getTime();\r\n      if (now < parseInt(tokenExpiry)) {\r\n        console.log('‚úÖ Using stored valid token');\r\n        setAccessToken(storedToken);\r\n        setIsAuthenticated(true);\r\n      } else {\r\n        console.log('‚è∞ Stored token expired, clearing...');\r\n        localStorage.removeItem('google_access_token');\r\n        localStorage.removeItem('google_token_expiry');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const authenticate = async () => {\r\n    console.log('üöÄ Starting Google authentication...');\r\n    \r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      console.log('üìû Calling API to get auth URL...');\r\n      \r\n      // Get authorization URL\r\n      const response = await cloudStorageAPI.getAuthUrl();\r\n      console.log('üìù API Response:', response);\r\n      \r\n      const authUrl = response.data.authUrl;\r\n      console.log('üîó Auth URL received:', authUrl);\r\n\r\n      if (!authUrl) {\r\n        throw new Error('No auth URL received from server');\r\n      }\r\n\r\n      if (!authUrl.includes('accounts.google.com')) {\r\n        throw new Error('Invalid auth URL format: ' + authUrl);\r\n      }\r\n\r\n      // Create a promise to handle the popup result\r\n      const authPromise = new Promise((resolve, reject) => {\r\n        console.log('üîÑ Opening popup window...');\r\n        \r\n        const popup = window.open(\r\n          authUrl,\r\n          'google-auth',\r\n          'width=500,height=600,scrollbars=yes,resizable=yes,left=' + \r\n          Math.round(window.screen.width / 2 - 250) + ',top=' + \r\n          Math.round(window.screen.height / 2 - 300)\r\n        );\r\n\r\n        if (!popup) {\r\n          console.error('‚ùå Popup blocked!');\r\n          reject(new Error('Popup blocked. Please allow popups for this site and try again.'));\r\n          return;\r\n        }\r\n\r\n        console.log('‚úÖ Popup opened successfully');\r\n\r\n        // Debug: Check popup URL periodically\r\n        const urlCheckInterval = setInterval(() => {\r\n          try {\r\n            if (popup.closed) {\r\n              clearInterval(urlCheckInterval);\r\n              return;\r\n            }\r\n            // This will throw an error due to CORS, but that's expected\r\n            const currentUrl = popup.location.href;\r\n            console.log('üîç Popup URL:', currentUrl);\r\n          } catch (e) {\r\n            // Expected cross-origin error, ignore\r\n          }\r\n        }, 2000);\r\n\r\n        // Listen for messages from the popup\r\n        const messageHandler = (event) => {\r\n          console.log('üì® Message received in parent window:', {\r\n            origin: event.origin,\r\n            expectedOrigin: window.location.origin,\r\n            data: event.data\r\n          });\r\n\r\n          // Verify origin for security\r\n          if (event.origin !== window.location.origin) {\r\n            console.warn('‚ö†Ô∏è Message from unexpected origin:', event.origin);\r\n            return;\r\n          }\r\n\r\n          clearInterval(urlCheckInterval);\r\n\r\n          if (event.data.type === 'GOOGLE_AUTH_SUCCESS') {\r\n            console.log('‚úÖ Success message received:', event.data);\r\n            window.removeEventListener('message', messageHandler);\r\n            resolve({\r\n              accessToken: event.data.accessToken,\r\n              expiry: event.data.expiry\r\n            });\r\n          } else if (event.data.type === 'GOOGLE_AUTH_ERROR') {\r\n            console.error('‚ùå Error message received:', event.data);\r\n            window.removeEventListener('message', messageHandler);\r\n            reject(new Error(event.data.error || 'Authentication failed'));\r\n          }\r\n        };\r\n\r\n        window.addEventListener('message', messageHandler);\r\n        console.log('üëÇ Message listener added');\r\n\r\n        // Check if popup was closed manually\r\n        const checkClosed = setInterval(() => {\r\n          if (popup.closed) {\r\n            console.log('‚ùå Popup was closed by user');\r\n            clearInterval(checkClosed);\r\n            clearInterval(urlCheckInterval);\r\n            window.removeEventListener('message', messageHandler);\r\n            reject(new Error('Authentication cancelled by user'));\r\n          }\r\n        }, 1000);\r\n\r\n        // Timeout after 5 minutes\r\n        setTimeout(() => {\r\n          console.log('‚è∞ Authentication timeout');\r\n          clearInterval(checkClosed);\r\n          clearInterval(urlCheckInterval);\r\n          window.removeEventListener('message', messageHandler);\r\n          if (!popup.closed) {\r\n            popup.close();\r\n          }\r\n          reject(new Error('Authentication timeout (5 minutes)'));\r\n        }, 300000);\r\n      });\r\n\r\n      console.log('‚è≥ Waiting for authentication result...');\r\n      \r\n      // Wait for authentication result\r\n      const { accessToken, expiry } = await authPromise;\r\n      \r\n      console.log('‚úÖ Authentication successful!', {\r\n        tokenLength: accessToken?.length,\r\n        expiry: new Date(parseInt(expiry))\r\n      });\r\n      \r\n      // Store tokens\r\n      localStorage.setItem('google_access_token', accessToken);\r\n      localStorage.setItem('google_token_expiry', expiry.toString());\r\n      \r\n      setAccessToken(accessToken);\r\n      setIsAuthenticated(true);\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Authentication failed:', error);\r\n      setError(error.message || 'Authentication failed');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    console.log('üö™ Logging out...');\r\n    localStorage.removeItem('google_access_token');\r\n    localStorage.removeItem('google_token_expiry');\r\n    setAccessToken(null);\r\n    setIsAuthenticated(false);\r\n    setError(null);\r\n  };\r\n\r\n  return {\r\n    isAuthenticated,\r\n    accessToken,\r\n    isLoading,\r\n    error,\r\n    authenticate,\r\n    logout\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}