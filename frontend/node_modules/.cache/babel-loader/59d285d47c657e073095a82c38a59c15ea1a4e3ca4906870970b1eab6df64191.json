{"ast":null,"code":"var _jsxFileName = \"D:\\\\pdf demo\\\\frontend\\\\src\\\\contexts\\\\SearchContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { searchAPI } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchContext = /*#__PURE__*/createContext();\nexport const useSearch = () => {\n  _s();\n  const context = useContext(SearchContext);\n  if (!context) {\n    throw new Error('useSearch must be used within a SearchProvider');\n  }\n  return context;\n};\n_s(useSearch, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SearchProvider = ({\n  children\n}) => {\n  _s2();\n  const [searchState, setSearchState] = useState({\n    query: '',\n    results: [],\n    loading: false,\n    error: null,\n    pagination: null,\n    filters: {\n      pdfUuid: null,\n      contentType: 'all'\n    },\n    suggestions: [],\n    showResults: false\n  });\n  const [searchHistory, setSearchHistory] = useState([]);\n  const updateSearchState = useCallback(updates => {\n    setSearchState(prev => ({\n      ...prev,\n      ...updates\n    }));\n  }, []);\n  const search = useCallback(async (query, filters = {}) => {\n    if (!query || query.trim().length < 2) {\n      updateSearchState({\n        results: [],\n        error: 'Search query must be at least 2 characters',\n        showResults: false\n      });\n      return;\n    }\n    updateSearchState({\n      loading: true,\n      error: null\n    });\n    try {\n      const response = await searchAPI.search({\n        query: query.trim(),\n        ...searchState.filters,\n        ...filters\n      });\n      updateSearchState({\n        results: response.data.results,\n        pagination: response.data.pagination,\n        loading: false,\n        showResults: true,\n        query: query.trim()\n      });\n\n      // Add to search history\n      setSearchHistory(prev => {\n        const newHistory = [query.trim(), ...prev.filter(h => h !== query.trim())];\n        return newHistory.slice(0, 10); // Keep only last 10 searches\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      updateSearchState({\n        loading: false,\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Search failed',\n        results: [],\n        showResults: false\n      });\n    }\n  }, [searchState.filters]);\n  const advancedSearch = useCallback(async searchParams => {\n    updateSearchState({\n      loading: true,\n      error: null\n    });\n    try {\n      const response = await searchAPI.advancedSearch(searchParams);\n      updateSearchState({\n        results: response.data.results,\n        pagination: response.data.pagination,\n        loading: false,\n        showResults: true,\n        query: searchParams.query\n      });\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      updateSearchState({\n        loading: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Advanced search failed',\n        results: [],\n        showResults: false\n      });\n    }\n  }, []);\n  const getSuggestions = useCallback(async query => {\n    if (!query || query.length < 2) {\n      updateSearchState({\n        suggestions: []\n      });\n      return;\n    }\n    try {\n      const response = await searchAPI.getSuggestions(query);\n      updateSearchState({\n        suggestions: response.data.suggestions\n      });\n    } catch (error) {\n      console.error('Failed to get suggestions:', error);\n    }\n  }, []);\n  const clearSearch = useCallback(() => {\n    updateSearchState({\n      query: '',\n      results: [],\n      error: null,\n      pagination: null,\n      suggestions: [],\n      showResults: false\n    });\n  }, []);\n  const setFilters = useCallback(filters => {\n    updateSearchState({\n      filters: {\n        ...searchState.filters,\n        ...filters\n      }\n    });\n  }, [searchState.filters]);\n  const indexPdf = useCallback(async pdfUuid => {\n    try {\n      const response = await searchAPI.indexPdf(pdfUuid);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to index PDF');\n    }\n  }, []);\n  const value = {\n    searchState,\n    searchHistory,\n    search,\n    advancedSearch,\n    getSuggestions,\n    clearSearch,\n    setFilters,\n    indexPdf,\n    updateSearchState\n  };\n  return /*#__PURE__*/_jsxDEV(SearchContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n};\n_s2(SearchProvider, \"CL4ajfx4YSPVYLUflTUrMIt8aps=\");\n_c = SearchProvider;\nvar _c;\n$RefreshReg$(_c, \"SearchProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","searchAPI","jsxDEV","_jsxDEV","SearchContext","useSearch","_s","context","Error","SearchProvider","children","_s2","searchState","setSearchState","query","results","loading","error","pagination","filters","pdfUuid","contentType","suggestions","showResults","searchHistory","setSearchHistory","updateSearchState","updates","prev","search","trim","length","response","data","newHistory","filter","h","slice","_error$response","_error$response$data","advancedSearch","searchParams","_error$response2","_error$response2$data","getSuggestions","console","clearSearch","setFilters","indexPdf","_error$response3","_error$response3$data","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/pdf demo/frontend/src/contexts/SearchContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport { searchAPI } from '../services/api';\r\n\r\nconst SearchContext = createContext();\r\n\r\nexport const useSearch = () => {\r\n  const context = useContext(SearchContext);\r\n  if (!context) {\r\n    throw new Error('useSearch must be used within a SearchProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const SearchProvider = ({ children }) => {\r\n  const [searchState, setSearchState] = useState({\r\n    query: '',\r\n    results: [],\r\n    loading: false,\r\n    error: null,\r\n    pagination: null,\r\n    filters: {\r\n      pdfUuid: null,\r\n      contentType: 'all'\r\n    },\r\n    suggestions: [],\r\n    showResults: false\r\n  });\r\n\r\n  const [searchHistory, setSearchHistory] = useState([]);\r\n\r\n  const updateSearchState = useCallback((updates) => {\r\n    setSearchState(prev => ({ ...prev, ...updates }));\r\n  }, []);\r\n\r\n  const search = useCallback(async (query, filters = {}) => {\r\n    if (!query || query.trim().length < 2) {\r\n      updateSearchState({\r\n        results: [],\r\n        error: 'Search query must be at least 2 characters',\r\n        showResults: false\r\n      });\r\n      return;\r\n    }\r\n\r\n    updateSearchState({ loading: true, error: null });\r\n\r\n    try {\r\n      const response = await searchAPI.search({\r\n        query: query.trim(),\r\n        ...searchState.filters,\r\n        ...filters\r\n      });\r\n\r\n      updateSearchState({\r\n        results: response.data.results,\r\n        pagination: response.data.pagination,\r\n        loading: false,\r\n        showResults: true,\r\n        query: query.trim()\r\n      });\r\n\r\n      // Add to search history\r\n      setSearchHistory(prev => {\r\n        const newHistory = [query.trim(), ...prev.filter(h => h !== query.trim())];\r\n        return newHistory.slice(0, 10); // Keep only last 10 searches\r\n      });\r\n\r\n    } catch (error) {\r\n      updateSearchState({\r\n        loading: false,\r\n        error: error.response?.data?.error || 'Search failed',\r\n        results: [],\r\n        showResults: false\r\n      });\r\n    }\r\n  }, [searchState.filters]);\r\n\r\n  const advancedSearch = useCallback(async (searchParams) => {\r\n    updateSearchState({ loading: true, error: null });\r\n\r\n    try {\r\n      const response = await searchAPI.advancedSearch(searchParams);\r\n      \r\n      updateSearchState({\r\n        results: response.data.results,\r\n        pagination: response.data.pagination,\r\n        loading: false,\r\n        showResults: true,\r\n        query: searchParams.query\r\n      });\r\n\r\n    } catch (error) {\r\n      updateSearchState({\r\n        loading: false,\r\n        error: error.response?.data?.error || 'Advanced search failed',\r\n        results: [],\r\n        showResults: false\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  const getSuggestions = useCallback(async (query) => {\r\n    if (!query || query.length < 2) {\r\n      updateSearchState({ suggestions: [] });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await searchAPI.getSuggestions(query);\r\n      updateSearchState({ suggestions: response.data.suggestions });\r\n    } catch (error) {\r\n      console.error('Failed to get suggestions:', error);\r\n    }\r\n  }, []);\r\n\r\n  const clearSearch = useCallback(() => {\r\n    updateSearchState({\r\n      query: '',\r\n      results: [],\r\n      error: null,\r\n      pagination: null,\r\n      suggestions: [],\r\n      showResults: false\r\n    });\r\n  }, []);\r\n\r\n  const setFilters = useCallback((filters) => {\r\n    updateSearchState({\r\n      filters: { ...searchState.filters, ...filters }\r\n    });\r\n  }, [searchState.filters]);\r\n\r\n  const indexPdf = useCallback(async (pdfUuid) => {\r\n    try {\r\n      const response = await searchAPI.indexPdf(pdfUuid);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw new Error(error.response?.data?.error || 'Failed to index PDF');\r\n    }\r\n  }, []);\r\n\r\n  const value = {\r\n    searchState,\r\n    searchHistory,\r\n    search,\r\n    advancedSearch,\r\n    getSuggestions,\r\n    clearSearch,\r\n    setFilters,\r\n    indexPdf,\r\n    updateSearchState\r\n  };\r\n\r\n  return (\r\n    <SearchContext.Provider value={value}>\r\n      {children}\r\n    </SearchContext.Provider>\r\n  );\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC/E,SAASC,SAAS,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,aAAa,gBAAGP,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMQ,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,OAAO,GAAGT,UAAU,CAACM,aAAa,CAAC;EACzC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,SAAS;AAQtB,OAAO,MAAMI,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC9C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGd,QAAQ,CAAC;IAC7Ce,KAAK,EAAE,EAAE;IACTC,OAAO,EAAE,EAAE;IACXC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,IAAI;IACXC,UAAU,EAAE,IAAI;IAChBC,OAAO,EAAE;MACPC,OAAO,EAAE,IAAI;MACbC,WAAW,EAAE;IACf,CAAC;IACDC,WAAW,EAAE,EAAE;IACfC,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAM2B,iBAAiB,GAAG1B,WAAW,CAAE2B,OAAO,IAAK;IACjDd,cAAc,CAACe,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,GAAGD;IAAQ,CAAC,CAAC,CAAC;EACnD,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,MAAM,GAAG7B,WAAW,CAAC,OAAOc,KAAK,EAAEK,OAAO,GAAG,CAAC,CAAC,KAAK;IACxD,IAAI,CAACL,KAAK,IAAIA,KAAK,CAACgB,IAAI,CAAC,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;MACrCL,iBAAiB,CAAC;QAChBX,OAAO,EAAE,EAAE;QACXE,KAAK,EAAE,4CAA4C;QACnDM,WAAW,EAAE;MACf,CAAC,CAAC;MACF;IACF;IAEAG,iBAAiB,CAAC;MAAEV,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IAEjD,IAAI;MACF,MAAMe,QAAQ,GAAG,MAAM/B,SAAS,CAAC4B,MAAM,CAAC;QACtCf,KAAK,EAAEA,KAAK,CAACgB,IAAI,CAAC,CAAC;QACnB,GAAGlB,WAAW,CAACO,OAAO;QACtB,GAAGA;MACL,CAAC,CAAC;MAEFO,iBAAiB,CAAC;QAChBX,OAAO,EAAEiB,QAAQ,CAACC,IAAI,CAAClB,OAAO;QAC9BG,UAAU,EAAEc,QAAQ,CAACC,IAAI,CAACf,UAAU;QACpCF,OAAO,EAAE,KAAK;QACdO,WAAW,EAAE,IAAI;QACjBT,KAAK,EAAEA,KAAK,CAACgB,IAAI,CAAC;MACpB,CAAC,CAAC;;MAEF;MACAL,gBAAgB,CAACG,IAAI,IAAI;QACvB,MAAMM,UAAU,GAAG,CAACpB,KAAK,CAACgB,IAAI,CAAC,CAAC,EAAE,GAAGF,IAAI,CAACO,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKtB,KAAK,CAACgB,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1E,OAAOI,UAAU,CAACG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;MAClC,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOpB,KAAK,EAAE;MAAA,IAAAqB,eAAA,EAAAC,oBAAA;MACdb,iBAAiB,CAAC;QAChBV,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,EAAAqB,eAAA,GAAArB,KAAK,CAACe,QAAQ,cAAAM,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBL,IAAI,cAAAM,oBAAA,uBAApBA,oBAAA,CAAsBtB,KAAK,KAAI,eAAe;QACrDF,OAAO,EAAE,EAAE;QACXQ,WAAW,EAAE;MACf,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACX,WAAW,CAACO,OAAO,CAAC,CAAC;EAEzB,MAAMqB,cAAc,GAAGxC,WAAW,CAAC,MAAOyC,YAAY,IAAK;IACzDf,iBAAiB,CAAC;MAAEV,OAAO,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IAEjD,IAAI;MACF,MAAMe,QAAQ,GAAG,MAAM/B,SAAS,CAACuC,cAAc,CAACC,YAAY,CAAC;MAE7Df,iBAAiB,CAAC;QAChBX,OAAO,EAAEiB,QAAQ,CAACC,IAAI,CAAClB,OAAO;QAC9BG,UAAU,EAAEc,QAAQ,CAACC,IAAI,CAACf,UAAU;QACpCF,OAAO,EAAE,KAAK;QACdO,WAAW,EAAE,IAAI;QACjBT,KAAK,EAAE2B,YAAY,CAAC3B;MACtB,CAAC,CAAC;IAEJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA,IAAAyB,gBAAA,EAAAC,qBAAA;MACdjB,iBAAiB,CAAC;QAChBV,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,EAAAyB,gBAAA,GAAAzB,KAAK,CAACe,QAAQ,cAAAU,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBT,IAAI,cAAAU,qBAAA,uBAApBA,qBAAA,CAAsB1B,KAAK,KAAI,wBAAwB;QAC9DF,OAAO,EAAE,EAAE;QACXQ,WAAW,EAAE;MACf,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMqB,cAAc,GAAG5C,WAAW,CAAC,MAAOc,KAAK,IAAK;IAClD,IAAI,CAACA,KAAK,IAAIA,KAAK,CAACiB,MAAM,GAAG,CAAC,EAAE;MAC9BL,iBAAiB,CAAC;QAAEJ,WAAW,EAAE;MAAG,CAAC,CAAC;MACtC;IACF;IAEA,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAM/B,SAAS,CAAC2C,cAAc,CAAC9B,KAAK,CAAC;MACtDY,iBAAiB,CAAC;QAAEJ,WAAW,EAAEU,QAAQ,CAACC,IAAI,CAACX;MAAY,CAAC,CAAC;IAC/D,CAAC,CAAC,OAAOL,KAAK,EAAE;MACd4B,OAAO,CAAC5B,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM6B,WAAW,GAAG9C,WAAW,CAAC,MAAM;IACpC0B,iBAAiB,CAAC;MAChBZ,KAAK,EAAE,EAAE;MACTC,OAAO,EAAE,EAAE;MACXE,KAAK,EAAE,IAAI;MACXC,UAAU,EAAE,IAAI;MAChBI,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMwB,UAAU,GAAG/C,WAAW,CAAEmB,OAAO,IAAK;IAC1CO,iBAAiB,CAAC;MAChBP,OAAO,EAAE;QAAE,GAAGP,WAAW,CAACO,OAAO;QAAE,GAAGA;MAAQ;IAChD,CAAC,CAAC;EACJ,CAAC,EAAE,CAACP,WAAW,CAACO,OAAO,CAAC,CAAC;EAEzB,MAAM6B,QAAQ,GAAGhD,WAAW,CAAC,MAAOoB,OAAO,IAAK;IAC9C,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAM/B,SAAS,CAAC+C,QAAQ,CAAC5B,OAAO,CAAC;MAClD,OAAOY,QAAQ,CAACC,IAAI;IACtB,CAAC,CAAC,OAAOhB,KAAK,EAAE;MAAA,IAAAgC,gBAAA,EAAAC,qBAAA;MACd,MAAM,IAAI1C,KAAK,CAAC,EAAAyC,gBAAA,GAAAhC,KAAK,CAACe,QAAQ,cAAAiB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBhB,IAAI,cAAAiB,qBAAA,uBAApBA,qBAAA,CAAsBjC,KAAK,KAAI,qBAAqB,CAAC;IACvE;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMkC,KAAK,GAAG;IACZvC,WAAW;IACXY,aAAa;IACbK,MAAM;IACNW,cAAc;IACdI,cAAc;IACdE,WAAW;IACXC,UAAU;IACVC,QAAQ;IACRtB;EACF,CAAC;EAED,oBACEvB,OAAA,CAACC,aAAa,CAACgD,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAzC,QAAA,EAClCA;EAAQ;IAAA2C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAC7C,GAAA,CAjJWF,cAAc;AAAAgD,EAAA,GAAdhD,cAAc;AAAA,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}