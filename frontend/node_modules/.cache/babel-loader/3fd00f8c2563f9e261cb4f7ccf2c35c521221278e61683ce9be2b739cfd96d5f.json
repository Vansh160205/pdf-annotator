{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { cloudStorageAPI } from '../services/api';\nexport const useGoogleAuth = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [accessToken, setAccessToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if user has stored tokens\n  useEffect(() => {\n    const storedToken = localStorage.getItem('google_access_token');\n    const tokenExpiry = localStorage.getItem('google_token_expiry');\n    console.log('üîç Checking stored tokens:', {\n      hasToken: !!storedToken,\n      hasExpiry: !!tokenExpiry,\n      expiry: tokenExpiry ? new Date(parseInt(tokenExpiry)) : null\n    });\n    if (storedToken && tokenExpiry) {\n      const now = new Date().getTime();\n      if (now < parseInt(tokenExpiry)) {\n        console.log('‚úÖ Using stored valid token');\n        setAccessToken(storedToken);\n        setIsAuthenticated(true);\n      } else {\n        console.log('‚è∞ Stored token expired, clearing...');\n        localStorage.removeItem('google_access_token');\n        localStorage.removeItem('google_token_expiry');\n      }\n    }\n\n    // Check for pending auth result from popup\n    checkForAuthResult();\n  }, []);\n\n  // Function to check for auth result in localStorage\n  const checkForAuthResult = () => {\n    const authStatus = localStorage.getItem('google_auth_status');\n    if (authStatus) {\n      try {\n        const result = JSON.parse(authStatus);\n        console.log('üìã Found pending auth result:', result);\n\n        // Clear the status\n        localStorage.removeItem('google_auth_status');\n        if (result.type === 'GOOGLE_AUTH_SUCCESS') {\n          console.log('‚úÖ Processing success result from localStorage');\n\n          // Store tokens\n          localStorage.setItem('google_access_token', result.accessToken);\n          localStorage.setItem('google_token_expiry', result.expiry.toString());\n          setAccessToken(result.accessToken);\n          setIsAuthenticated(true);\n          setError(null);\n        } else if (result.type === 'GOOGLE_AUTH_ERROR') {\n          console.error('‚ùå Processing error result from localStorage:', result.error);\n          setError(result.error || 'Authentication failed');\n        }\n      } catch (e) {\n        console.error('‚ùå Error parsing auth status:', e);\n        localStorage.removeItem('google_auth_status');\n      }\n    }\n  };\n  const authenticate = async () => {\n    console.log('üöÄ Starting Google authentication...');\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Clear any previous auth status\n      localStorage.removeItem('google_auth_status');\n      console.log('üìû Calling API to get auth URL...');\n      const response = await cloudStorageAPI.getAuthUrl();\n      const authUrl = response.data.authUrl;\n      console.log('üîó Auth URL received:', authUrl);\n      if (!authUrl) {\n        throw new Error('No auth URL received from server');\n      }\n\n      // Create a promise to handle the popup result\n      const authPromise = new Promise((resolve, reject) => {\n        console.log('üîÑ Opening popup window...');\n        const popup = window.open(authUrl, 'google-auth', 'width=600,height=700,scrollbars=yes,resizable=yes,left=' + Math.round(window.screen.width / 2 - 300) + ',top=' + Math.round(window.screen.height / 2 - 350));\n        if (!popup) {\n          console.error('‚ùå Popup blocked!');\n          reject(new Error('Popup blocked. Please allow popups for this site and try again.'));\n          return;\n        }\n        console.log('‚úÖ Popup opened successfully');\n        let isResolved = false;\n\n        // Listen for messages from the popup (primary method)\n        const messageHandler = event => {\n          var _event$data;\n          console.log('üì® Message received in parent window:', {\n            origin: event.origin,\n            expectedOrigin: window.location.origin,\n            data: event.data,\n            type: (_event$data = event.data) === null || _event$data === void 0 ? void 0 : _event$data.type\n          });\n          if (event.origin !== window.location.origin) {\n            console.warn('‚ö†Ô∏è Message from unexpected origin:', event.origin);\n            return;\n          }\n          if (isResolved) {\n            console.log('‚ö†Ô∏è Already resolved, ignoring message');\n            return;\n          }\n          if (event.data.type === 'GOOGLE_AUTH_SUCCESS') {\n            console.log('‚úÖ Success message received via postMessage');\n            isResolved = true;\n            window.removeEventListener('message', messageHandler);\n            clearInterval(pollInterval);\n            clearTimeout(timeoutId);\n            resolve({\n              accessToken: event.data.accessToken,\n              expiry: event.data.expiry\n            });\n          } else if (event.data.type === 'GOOGLE_AUTH_ERROR') {\n            console.error('‚ùå Error message received via postMessage:', event.data.error);\n            isResolved = true;\n            window.removeEventListener('message', messageHandler);\n            clearInterval(pollInterval);\n            clearTimeout(timeoutId);\n            reject(new Error(event.data.error || 'Authentication failed'));\n          }\n        };\n        window.addEventListener('message', messageHandler);\n\n        // Poll localStorage for auth result (fallback method)\n        const pollInterval = setInterval(() => {\n          if (isResolved) {\n            return;\n          }\n          const authStatus = localStorage.getItem('google_auth_status');\n          if (authStatus) {\n            try {\n              const result = JSON.parse(authStatus);\n              console.log('üìã Found auth result in localStorage:', result);\n\n              // Clear the status\n              localStorage.removeItem('google_auth_status');\n              isResolved = true;\n              window.removeEventListener('message', messageHandler);\n              clearInterval(pollInterval);\n              clearTimeout(timeoutId);\n              if (result.type === 'GOOGLE_AUTH_SUCCESS') {\n                console.log('‚úÖ Success result from localStorage');\n                resolve({\n                  accessToken: result.accessToken,\n                  expiry: result.expiry\n                });\n              } else {\n                console.error('‚ùå Error result from localStorage:', result.error);\n                reject(new Error(result.error || 'Authentication failed'));\n              }\n            } catch (e) {\n              console.error('‚ùå Error parsing auth status:', e);\n            }\n          }\n        }, 1000);\n\n        // Timeout after 3 minutes\n        const timeoutId = setTimeout(() => {\n          if (!isResolved) {\n            console.log('‚è∞ Authentication timeout');\n            isResolved = true;\n            window.removeEventListener('message', messageHandler);\n            clearInterval(pollInterval);\n            try {\n              popup.close();\n            } catch (e) {\n              console.log('Could not close popup on timeout:', e.message);\n            }\n            reject(new Error('Authentication timeout - please try again'));\n          }\n        }, 180000); // 3 minutes\n      });\n      console.log('‚è≥ Waiting for authentication result...');\n\n      // Wait for authentication result\n      const {\n        accessToken,\n        expiry\n      } = await authPromise;\n      console.log('‚úÖ Authentication successful!', {\n        tokenLength: accessToken === null || accessToken === void 0 ? void 0 : accessToken.length,\n        expiry: new Date(parseInt(expiry))\n      });\n\n      // Store tokens\n      localStorage.setItem('google_access_token', accessToken);\n      localStorage.setItem('google_token_expiry', expiry.toString());\n      setAccessToken(accessToken);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('‚ùå Authentication failed:', error);\n      setError(error.message || 'Authentication failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    console.log('üö™ Logging out...');\n    localStorage.removeItem('google_access_token');\n    localStorage.removeItem('google_token_expiry');\n    localStorage.removeItem('google_auth_status'); // Clear any auth status\n    setAccessToken(null);\n    setIsAuthenticated(false);\n    setError(null);\n  };\n  return {\n    isAuthenticated,\n    accessToken,\n    isLoading,\n    error,\n    authenticate,\n    logout\n  };\n};\n_s(useGoogleAuth, \"RUW3uT7eji0XzlCGLIHvlEecDoA=\");","map":{"version":3,"names":["useState","useEffect","cloudStorageAPI","useGoogleAuth","_s","isAuthenticated","setIsAuthenticated","accessToken","setAccessToken","isLoading","setIsLoading","error","setError","storedToken","localStorage","getItem","tokenExpiry","console","log","hasToken","hasExpiry","expiry","Date","parseInt","now","getTime","removeItem","checkForAuthResult","authStatus","result","JSON","parse","type","setItem","toString","e","authenticate","response","getAuthUrl","authUrl","data","Error","authPromise","Promise","resolve","reject","popup","window","open","Math","round","screen","width","height","isResolved","messageHandler","event","_event$data","origin","expectedOrigin","location","warn","removeEventListener","clearInterval","pollInterval","clearTimeout","timeoutId","addEventListener","setInterval","setTimeout","close","message","tokenLength","length","logout"],"sources":["D:/pdf demo/frontend/src/hooks/useGoogleAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { cloudStorageAPI } from '../services/api';\r\n\r\nexport const useGoogleAuth = () => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if user has stored tokens\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('google_access_token');\r\n    const tokenExpiry = localStorage.getItem('google_token_expiry');\r\n    \r\n    console.log('üîç Checking stored tokens:', { \r\n      hasToken: !!storedToken, \r\n      hasExpiry: !!tokenExpiry,\r\n      expiry: tokenExpiry ? new Date(parseInt(tokenExpiry)) : null\r\n    });\r\n    \r\n    if (storedToken && tokenExpiry) {\r\n      const now = new Date().getTime();\r\n      if (now < parseInt(tokenExpiry)) {\r\n        console.log('‚úÖ Using stored valid token');\r\n        setAccessToken(storedToken);\r\n        setIsAuthenticated(true);\r\n      } else {\r\n        console.log('‚è∞ Stored token expired, clearing...');\r\n        localStorage.removeItem('google_access_token');\r\n        localStorage.removeItem('google_token_expiry');\r\n      }\r\n    }\r\n\r\n    // Check for pending auth result from popup\r\n    checkForAuthResult();\r\n  }, []);\r\n\r\n  // Function to check for auth result in localStorage\r\n  const checkForAuthResult = () => {\r\n    const authStatus = localStorage.getItem('google_auth_status');\r\n    if (authStatus) {\r\n      try {\r\n        const result = JSON.parse(authStatus);\r\n        console.log('üìã Found pending auth result:', result);\r\n        \r\n        // Clear the status\r\n        localStorage.removeItem('google_auth_status');\r\n        \r\n        if (result.type === 'GOOGLE_AUTH_SUCCESS') {\r\n          console.log('‚úÖ Processing success result from localStorage');\r\n          \r\n          // Store tokens\r\n          localStorage.setItem('google_access_token', result.accessToken);\r\n          localStorage.setItem('google_token_expiry', result.expiry.toString());\r\n          \r\n          setAccessToken(result.accessToken);\r\n          setIsAuthenticated(true);\r\n          setError(null);\r\n          \r\n        } else if (result.type === 'GOOGLE_AUTH_ERROR') {\r\n          console.error('‚ùå Processing error result from localStorage:', result.error);\r\n          setError(result.error || 'Authentication failed');\r\n        }\r\n        \r\n      } catch (e) {\r\n        console.error('‚ùå Error parsing auth status:', e);\r\n        localStorage.removeItem('google_auth_status');\r\n      }\r\n    }\r\n  };\r\n\r\n  const authenticate = async () => {\r\n    console.log('üöÄ Starting Google authentication...');\r\n    \r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      // Clear any previous auth status\r\n      localStorage.removeItem('google_auth_status');\r\n\r\n      console.log('üìû Calling API to get auth URL...');\r\n      const response = await cloudStorageAPI.getAuthUrl();\r\n      const authUrl = response.data.authUrl;\r\n      \r\n      console.log('üîó Auth URL received:', authUrl);\r\n\r\n      if (!authUrl) {\r\n        throw new Error('No auth URL received from server');\r\n      }\r\n\r\n      // Create a promise to handle the popup result\r\n      const authPromise = new Promise((resolve, reject) => {\r\n        console.log('üîÑ Opening popup window...');\r\n        \r\n        const popup = window.open(\r\n          authUrl,\r\n          'google-auth',\r\n          'width=600,height=700,scrollbars=yes,resizable=yes,left=' + \r\n          Math.round(window.screen.width / 2 - 300) + ',top=' + \r\n          Math.round(window.screen.height / 2 - 350)\r\n        );\r\n\r\n        if (!popup) {\r\n          console.error('‚ùå Popup blocked!');\r\n          reject(new Error('Popup blocked. Please allow popups for this site and try again.'));\r\n          return;\r\n        }\r\n\r\n        console.log('‚úÖ Popup opened successfully');\r\n\r\n        let isResolved = false;\r\n\r\n        // Listen for messages from the popup (primary method)\r\n        const messageHandler = (event) => {\r\n          console.log('üì® Message received in parent window:', {\r\n            origin: event.origin,\r\n            expectedOrigin: window.location.origin,\r\n            data: event.data,\r\n            type: event.data?.type\r\n          });\r\n\r\n          if (event.origin !== window.location.origin) {\r\n            console.warn('‚ö†Ô∏è Message from unexpected origin:', event.origin);\r\n            return;\r\n          }\r\n\r\n          if (isResolved) {\r\n            console.log('‚ö†Ô∏è Already resolved, ignoring message');\r\n            return;\r\n          }\r\n\r\n          if (event.data.type === 'GOOGLE_AUTH_SUCCESS') {\r\n            console.log('‚úÖ Success message received via postMessage');\r\n            isResolved = true;\r\n            window.removeEventListener('message', messageHandler);\r\n            clearInterval(pollInterval);\r\n            clearTimeout(timeoutId);\r\n            \r\n            resolve({\r\n              accessToken: event.data.accessToken,\r\n              expiry: event.data.expiry\r\n            });\r\n            \r\n          } else if (event.data.type === 'GOOGLE_AUTH_ERROR') {\r\n            console.error('‚ùå Error message received via postMessage:', event.data.error);\r\n            isResolved = true;\r\n            window.removeEventListener('message', messageHandler);\r\n            clearInterval(pollInterval);\r\n            clearTimeout(timeoutId);\r\n            \r\n            reject(new Error(event.data.error || 'Authentication failed'));\r\n          }\r\n        };\r\n\r\n        window.addEventListener('message', messageHandler);\r\n\r\n        // Poll localStorage for auth result (fallback method)\r\n        const pollInterval = setInterval(() => {\r\n          if (isResolved) {\r\n            return;\r\n          }\r\n\r\n          const authStatus = localStorage.getItem('google_auth_status');\r\n          if (authStatus) {\r\n            try {\r\n              const result = JSON.parse(authStatus);\r\n              console.log('üìã Found auth result in localStorage:', result);\r\n              \r\n              // Clear the status\r\n              localStorage.removeItem('google_auth_status');\r\n              \r\n              isResolved = true;\r\n              window.removeEventListener('message', messageHandler);\r\n              clearInterval(pollInterval);\r\n              clearTimeout(timeoutId);\r\n              \r\n              if (result.type === 'GOOGLE_AUTH_SUCCESS') {\r\n                console.log('‚úÖ Success result from localStorage');\r\n                resolve({\r\n                  accessToken: result.accessToken,\r\n                  expiry: result.expiry\r\n                });\r\n              } else {\r\n                console.error('‚ùå Error result from localStorage:', result.error);\r\n                reject(new Error(result.error || 'Authentication failed'));\r\n              }\r\n              \r\n            } catch (e) {\r\n              console.error('‚ùå Error parsing auth status:', e);\r\n            }\r\n          }\r\n        }, 1000);\r\n\r\n        // Timeout after 3 minutes\r\n        const timeoutId = setTimeout(() => {\r\n          if (!isResolved) {\r\n            console.log('‚è∞ Authentication timeout');\r\n            isResolved = true;\r\n            window.removeEventListener('message', messageHandler);\r\n            clearInterval(pollInterval);\r\n            \r\n            try {\r\n              popup.close();\r\n            } catch (e) {\r\n              console.log('Could not close popup on timeout:', e.message);\r\n            }\r\n            \r\n            reject(new Error('Authentication timeout - please try again'));\r\n          }\r\n        }, 180000); // 3 minutes\r\n      });\r\n\r\n      console.log('‚è≥ Waiting for authentication result...');\r\n      \r\n      // Wait for authentication result\r\n      const { accessToken, expiry } = await authPromise;\r\n      \r\n      console.log('‚úÖ Authentication successful!', {\r\n        tokenLength: accessToken?.length,\r\n        expiry: new Date(parseInt(expiry))\r\n      });\r\n      \r\n      // Store tokens\r\n      localStorage.setItem('google_access_token', accessToken);\r\n      localStorage.setItem('google_token_expiry', expiry.toString());\r\n      \r\n      setAccessToken(accessToken);\r\n      setIsAuthenticated(true);\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Authentication failed:', error);\r\n      setError(error.message || 'Authentication failed');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    console.log('üö™ Logging out...');\r\n    localStorage.removeItem('google_access_token');\r\n    localStorage.removeItem('google_token_expiry');\r\n    localStorage.removeItem('google_auth_status'); // Clear any auth status\r\n    setAccessToken(null);\r\n    setIsAuthenticated(false);\r\n    setError(null);\r\n  };\r\n\r\n  return {\r\n    isAuthenticated,\r\n    accessToken,\r\n    isLoading,\r\n    error,\r\n    authenticate,\r\n    logout\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}