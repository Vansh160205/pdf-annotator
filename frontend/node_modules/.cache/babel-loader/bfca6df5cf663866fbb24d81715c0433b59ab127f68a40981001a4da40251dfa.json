{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { cloudStorageAPI } from '../services/api';\nexport const useGoogleAuth = () => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [accessToken, setAccessToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Check if user has stored tokens\n  useEffect(() => {\n    const storedToken = localStorage.getItem('google_access_token');\n    const tokenExpiry = localStorage.getItem('google_token_expiry');\n    if (storedToken && tokenExpiry) {\n      const now = new Date().getTime();\n      if (now < parseInt(tokenExpiry)) {\n        setAccessToken(storedToken);\n        setIsAuthenticated(true);\n      } else {\n        // Token expired, clear storage\n        localStorage.removeItem('google_access_token');\n        localStorage.removeItem('google_token_expiry');\n      }\n    }\n  }, []);\n  const authenticate = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n\n      // Get authorization URL\n      const response = await cloudStorageAPI.getAuthUrl();\n      const authUrl = response.data.authUrl;\n\n      // Create a promise to handle the popup result\n      const authPromise = new Promise((resolve, reject) => {\n        const popup = window.open(authUrl, 'google-auth', 'width=500,height=600,scrollbars=yes,resizable=yes');\n        if (!popup) {\n          reject(new Error('Popup blocked. Please allow popups for this site.'));\n          return;\n        }\n\n        // Listen for messages from the popup\n        const messageHandler = event => {\n          // Make sure the message is from the expected origin\n          if (event.origin !== window.location.origin) {\n            return;\n          }\n          if (event.data.type === 'GOOGLE_AUTH_SUCCESS') {\n            window.removeEventListener('message', messageHandler);\n            popup.close();\n            resolve(event.data.code);\n          } else if (event.data.type === 'GOOGLE_AUTH_ERROR') {\n            window.removeEventListener('message', messageHandler);\n            popup.close();\n            reject(new Error(event.data.error || 'Authentication failed'));\n          }\n        };\n        window.addEventListener('message', messageHandler);\n\n        // Check if popup was closed manually\n        const checkClosed = setInterval(() => {\n          if (popup.closed) {\n            clearInterval(checkClosed);\n            window.removeEventListener('message', messageHandler);\n            reject(new Error('Authentication cancelled by user'));\n          }\n        }, 1000);\n\n        // Timeout after 5 minutes\n        setTimeout(() => {\n          clearInterval(checkClosed);\n          window.removeEventListener('message', messageHandler);\n          if (!popup.closed) {\n            popup.close();\n          }\n          reject(new Error('Authentication timeout'));\n        }, 300000);\n      });\n\n      // Wait for authentication result\n      const code = await authPromise;\n\n      // Exchange code for tokens\n      const tokenResponse = await cloudStorageAPI.handleCallback(code);\n      const {\n        accessToken,\n        expiryDate\n      } = tokenResponse.data;\n\n      // Store tokens\n      localStorage.setItem('google_access_token', accessToken);\n      localStorage.setItem('google_token_expiry', expiryDate.toString());\n      setAccessToken(accessToken);\n      setIsAuthenticated(true);\n    } catch (error) {\n      setError(error.message || 'Authentication failed');\n      console.error('Auth error:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('google_access_token');\n    localStorage.removeItem('google_token_expiry');\n    setAccessToken(null);\n    setIsAuthenticated(false);\n    setError(null);\n  };\n  return {\n    isAuthenticated,\n    accessToken,\n    isLoading,\n    error,\n    authenticate,\n    logout\n  };\n};\n_s(useGoogleAuth, \"RUW3uT7eji0XzlCGLIHvlEecDoA=\");","map":{"version":3,"names":["useState","useEffect","cloudStorageAPI","useGoogleAuth","_s","isAuthenticated","setIsAuthenticated","accessToken","setAccessToken","isLoading","setIsLoading","error","setError","storedToken","localStorage","getItem","tokenExpiry","now","Date","getTime","parseInt","removeItem","authenticate","response","getAuthUrl","authUrl","data","authPromise","Promise","resolve","reject","popup","window","open","Error","messageHandler","event","origin","location","type","removeEventListener","close","code","addEventListener","checkClosed","setInterval","closed","clearInterval","setTimeout","tokenResponse","handleCallback","expiryDate","setItem","toString","message","console","logout"],"sources":["D:/pdf demo/frontend/src/hooks/useGoogleAuth.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { cloudStorageAPI } from '../services/api';\r\n\r\nexport const useGoogleAuth = () => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [accessToken, setAccessToken] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Check if user has stored tokens\r\n  useEffect(() => {\r\n    const storedToken = localStorage.getItem('google_access_token');\r\n    const tokenExpiry = localStorage.getItem('google_token_expiry');\r\n    \r\n    if (storedToken && tokenExpiry) {\r\n      const now = new Date().getTime();\r\n      if (now < parseInt(tokenExpiry)) {\r\n        setAccessToken(storedToken);\r\n        setIsAuthenticated(true);\r\n      } else {\r\n        // Token expired, clear storage\r\n        localStorage.removeItem('google_access_token');\r\n        localStorage.removeItem('google_token_expiry');\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const authenticate = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      // Get authorization URL\r\n      const response = await cloudStorageAPI.getAuthUrl();\r\n      const authUrl = response.data.authUrl;\r\n\r\n      // Create a promise to handle the popup result\r\n      const authPromise = new Promise((resolve, reject) => {\r\n        const popup = window.open(\r\n          authUrl,\r\n          'google-auth',\r\n          'width=500,height=600,scrollbars=yes,resizable=yes'\r\n        );\r\n\r\n        if (!popup) {\r\n          reject(new Error('Popup blocked. Please allow popups for this site.'));\r\n          return;\r\n        }\r\n\r\n        // Listen for messages from the popup\r\n        const messageHandler = (event) => {\r\n          // Make sure the message is from the expected origin\r\n          if (event.origin !== window.location.origin) {\r\n            return;\r\n          }\r\n\r\n          if (event.data.type === 'GOOGLE_AUTH_SUCCESS') {\r\n            window.removeEventListener('message', messageHandler);\r\n            popup.close();\r\n            resolve(event.data.code);\r\n          } else if (event.data.type === 'GOOGLE_AUTH_ERROR') {\r\n            window.removeEventListener('message', messageHandler);\r\n            popup.close();\r\n            reject(new Error(event.data.error || 'Authentication failed'));\r\n          }\r\n        };\r\n\r\n        window.addEventListener('message', messageHandler);\r\n\r\n        // Check if popup was closed manually\r\n        const checkClosed = setInterval(() => {\r\n          if (popup.closed) {\r\n            clearInterval(checkClosed);\r\n            window.removeEventListener('message', messageHandler);\r\n            reject(new Error('Authentication cancelled by user'));\r\n          }\r\n        }, 1000);\r\n\r\n        // Timeout after 5 minutes\r\n        setTimeout(() => {\r\n          clearInterval(checkClosed);\r\n          window.removeEventListener('message', messageHandler);\r\n          if (!popup.closed) {\r\n            popup.close();\r\n          }\r\n          reject(new Error('Authentication timeout'));\r\n        }, 300000);\r\n      });\r\n\r\n      // Wait for authentication result\r\n      const code = await authPromise;\r\n\r\n      // Exchange code for tokens\r\n      const tokenResponse = await cloudStorageAPI.handleCallback(code);\r\n      const { accessToken, expiryDate } = tokenResponse.data;\r\n      \r\n      // Store tokens\r\n      localStorage.setItem('google_access_token', accessToken);\r\n      localStorage.setItem('google_token_expiry', expiryDate.toString());\r\n      \r\n      setAccessToken(accessToken);\r\n      setIsAuthenticated(true);\r\n\r\n    } catch (error) {\r\n      setError(error.message || 'Authentication failed');\r\n      console.error('Auth error:', error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('google_access_token');\r\n    localStorage.removeItem('google_token_expiry');\r\n    setAccessToken(null);\r\n    setIsAuthenticated(false);\r\n    setError(null);\r\n  };\r\n\r\n  return {\r\n    isAuthenticated,\r\n    accessToken,\r\n    isLoading,\r\n    error,\r\n    authenticate,\r\n    logout\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}